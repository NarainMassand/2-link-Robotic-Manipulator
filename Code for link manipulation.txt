
#!/usr/bin/env python3
import math as m
import numpy as np
from pprint import pprint
import matplotlib.pyplot as plt
import imageio as S
from os import remove
import sys


out_dir = ""


## Part 0: Defining constants
length_1 = 2 #Link 1 length in units
length_2 = 2 #Link 1 length in units
EndTime = 50 # Seconds of runtime to goal position
Waypoints = [(4,0),(3,2),(2,3),(0,3),(-3,1),(-2,3),(-3,1)] # List of all required waypoints
## Part 1: Generating waypoint angles from inverse kinematics

#--------------------------------------------------------------------------
# -> Brief explanation for IK portion:
# For a 2-link like this, there are 2 possible solutions in IK for any point inside the far boundary:
# Case 1: Theta 2 could be positive (i.e. the arm folds elbow downwards, v shape)
# Case 2: Theta 2 could be negative (i.e. the arm folds elbow upwards, ^ shape)

# Note that in problem 1, joint limits are 0<=theta<=Pi. Thus, only case 1
# is relevant. The equations for this are:

#Theta2=acos((x^2 + y^2 - (length_1)^2 - (length_2)^2) / (2*length_1*length_2)) 
#Theta1=atan(y/x)-atan((length_2*sin(Theta2)) / (length_1+length_2*cos(Theta2)))

#Theta 2 must be found first, as it is needed to solve for theta 1.

#(We could have done this by hand, but the formulas are readily available online). 
# For this assignment's IK equations above, I referenced the following video tutorial:
# https://robotacademy.net.au/lesson/inverse-kinematics-for-a-2-joint-robot-arm-using-geometry/

#Now, on to calculation!

#--------------------------------------------------------------------------

# Our waypoints in order are (4,0)(3,2)(2,3)(0,3)(-3,1)(-2,3)(-3,1)

#WaypntList = [(4,0), (-3,1) ] # List of just first and last required waypoints for testing purposes.

class point():
    def __init__(self, x, y):
            self.x = x
            self.y = y

class waypoint_plot():
    def __init__(self, waypoint):
            self.value = waypoint
            self.plotted = False
        


def CalcTrajectory(WaypntList):
        WaypointTrajectories = []
        ThetaPointList = [] #Will Store Theta1 and Theta2 waypoint values
        for i in range(0,len(WaypntList)):
        
                #Current waypoint for evaluation:
                x = WaypntList[i][0]
                y = WaypntList[i][1]
                
                #Generate its IK angles solution (via slide 13 of lecture 4):
                #NOTE! Lecture has atan2(1,2) written as atan2(2,1) for some reason!
                #I have corrected and reversed this here!
                
                D=(x**2 + y**2 - (length_1)**2 - (length_2)**2) / (2*length_1*length_2)
                Theta2 = m.atan2(m.sqrt(1-D**2),D)
                Theta1 = m.atan2(y,x) - m.atan2(length_2*m.sin(Theta2), length_1+length_2*m.cos(Theta2))

                #Store those angles
                ThetaPointList.append((Theta1, Theta2))

        for pairsCounter in range(0,len(WaypntList)-1):
                ActivePair = np.matrix([[ThetaPointList[pairsCounter][0], ThetaPointList[pairsCounter][1]], 
                                        [ThetaPointList[pairsCounter+1][0], ThetaPointList[pairsCounter+1][1]]])

                #pprint(ActivePair)
                ## Generating Waypoint Control Equations via Matrix Solver

                #we want to control 7 positions, 2 velocities, and 2 accelerations = 11 parameters.
                # Control list:
                #     theta1(0)
                #     theta1(0)_dot
                #     theta1(0)_dotdot
                #     theta1(1)
                #     theta1(2)
                #     theta1(3)
                #     theta1(4)
                #     theta1(5)
                #     theta1(6)
                #     theta1(7)
                #     theta1(7)_dot 
                #     theta1(7)_dotdot
                # Therefore we need an 11x11 M_matrix of times and an 11x1 b_vector of a values.
                #(See lecture 11, slides 14-15 for details.)

                #We will assume that for the purposes of the assignment, waypoints are evenly timed.
                WTI = []
                M_Matrix = np.zeros((len(ActivePair) * 3, len(ActivePair) * 3)) #create empty 11x11 matrix of zeros
                period = (EndTime/(len(WaypntList)-1))/(len(ActivePair)-1) #Waypoint Time Increment (in seconds)

                #NOTE: WTI(1)=0 because time series must start at 0 for waypoint 1.

                for i in range(1,len(ActivePair) + 1): #Incrementing timestep
                #Step through to next time increment, starting at zero
                        WTI.append((i-1)*period) #Set current waypoint's time, starting at zero
                        for j in range(1,(len(ActivePair)) * 3 + 1): #Create 3 rows at a time per timestep
                                M_Matrix[(i-1)*3][j-1]= WTI[(i-1)]**(j-1) # row 1: pos.
                                try:
                                        M_Matrix[(i-1)*3+1][j-1] = (j-1)*WTI[(i-1)]**(j-2) # row 2: vel.
                                except:
                                        M_Matrix[(i-1)*3+1][j-1] = 0
                                try:
                                        M_Matrix[(i-1)*3 + 2][j-1]  = (j-2)*(j-1)*WTI[(i-1)]**(j-3) # row 3: acc.
                                except:
                                        M_Matrix[(i-1)*3 + 2][j-1]  = 0

                b_vector1 = np.zeros(len(ActivePair) * 3)
                b_vector2 = np.zeros(len(ActivePair) * 3)
                WTI = []
                #Conditions control vector for Theta1 & Theta2:
                
                for i in range(1,(len(ActivePair) + 1)):

                        #Step through to next time increment, starting at zero
                        WTI.append((i-1)*period) #Set current waypoint's time, starting at zero
                        b_vector1[(i-1)*3]= ActivePair[i-1,0] # row 1: pos.
                        b_vector1[(i-1)*3+1]= 0 # row 2: vel.
                        b_vector1[(i-1)*3+2]= 0 # row 3: acc.

                        b_vector2[(i-1)*3]= ActivePair[i-1,1] #row 1: pos.
                        b_vector2[(i-1)*3+1]= 0 # row 2: vel.
                        b_vector2[(i-1)*3+2]= 0 # row 3: acc.

                a_1 = np.matmul(np.linalg.inv(M_Matrix), b_vector1)
                a_2 = np.matmul(np.linalg.inv(M_Matrix), b_vector2)

                #calculating required theta values
                Timestep = 0.5 #second

                fractional_move = EndTime/(len(WaypntList)-1)
                
                timeVals = np.linspace(0,fractional_move, fractional_move/Timestep + 1)
                ThetaList = []
                
                for Time in timeVals:
                        q_1=0 #empty q_1 and q_2 angles to restart sum
                        q_2=0
                        
                        for k in range(1, len(a_1) + 1): #Implementing final trajectory equation by "a" vectors
                                
                                q_1 += a_1[k-1]*(Time**(k-1))
                                q_2 += a_2[k-1]*(Time**(k-1))
                        
                        ThetaList.append((q_1,q_2))
                WaypointTrajectories += (ThetaList)
        return WaypointTrajectories

def CalcFwdKinemeatics(Theta1, Theta2):
         #-----------------Getting endpoints from Theta 1 and 2--------------------------
        #------0R1----------------------------------------------------------------------
        #Joint 1 Rotation Matrix on its own (0R1), which is a function of theta 1 only.
        
        #NOTE: column 4 is (x;y;0;1) where x, y are the link 1 endpoints  relative to
        #the origin.
        Joint1RotMatrix = np.matrix([   [m.cos(Theta1),       -m.sin(Theta1),       0,     length_1*m.cos(Theta1)],
                                        [m. sin(Theta1),      m.cos(Theta1),        0,     length_1*m.sin(Theta1)],
                                        [0,                   0,                    1,     0],
                                        [0,                   0,                    0,     1]])
        #------1R2----------------------------------------------------------------------
        #Joint 2 Rotation Matrix on its own (1R2), which is a function of theta 2 only.
        
        #NOTE: column 4 is (xy01) where x, y are the link 2 endpoints  relative to
        #the link 1 endpoint coordinate frame. THIS IS MEANINGLESS WITHOUT THE MATRIX ABOVE!
        Joint2RotMatrix = np.matrix([   [m.cos(Theta2),       -m.sin(Theta2),       0,     length_2*m.cos(Theta2)],
                                        [m. sin(Theta2),      m.cos(Theta2),        0,     length_2*m.sin(Theta2)],
                                        [0,                   0,                    1,     0],
                                        [0,                   0,                    0,     1]])
        
        #------0R2----------------------------------------------------------------------
        #The full FWD Kinematics is [Joint1]*[Joint2] or 0R1*1R2 = (0R2)
        # which is a function of theta 1 and theta 2.
        
        #NOTE: column 4 is (x;y;0;1) where x, y are the link 2 endpoints  relative to
        #the origin coordinate frame.
        Fwd_Kin_TranslationMatrix = np.matmul(Joint1RotMatrix,Joint2RotMatrix)
        link1 = (point(0,0),point(Joint1RotMatrix[0,3],Joint1RotMatrix[1,3]))
        link2 = (point(Joint1RotMatrix[0,3], Joint1RotMatrix[1,3]),
                 point(Fwd_Kin_TranslationMatrix[0,3], Fwd_Kin_TranslationMatrix[1,3]))

        return (link1, link2)     

def AnimateRobot(trajectory):
        images=[] #preallocation
        c = 1 #counter variable
        a = plt.figure()
        waypoints_plot = [waypoint_plot(i) for i in Waypoints]
        for pos in trajectory:
                JointsCartesian = CalcFwdKinemeatics(pos[0], pos[1])
                #Creating an array for image names
                filename = out_dir + str(c) + '.png'
                plt.plot([JointsCartesian[0][0].x, JointsCartesian[0][1].x],
                        [JointsCartesian[0][0].y, JointsCartesian[0][1].y])	#plots the arm
                plt.plot([JointsCartesian[1][0].x, JointsCartesian[1][1].x],
                        [JointsCartesian[1][0].y, JointsCartesian[1][1].y])     #plots the manipulator
                plt.plot([JointsCartesian[1][1].x],[JointsCartesian[1][1].y], marker="D")
                plt.plot(0,0, marker="_", markersize=24)                                 #marker to represent a tool
                plt.legend(['Arm','Manipulator'])                               #legend to label the curves
                plt.axis((-5,5,-1,5))
                showJoint1 = "Elbow: (" + str(JointsCartesian[0][1].x.round(1)) + \
                                "," + str(JointsCartesian[0][1].y.round(1)) + ")"
                showJoint2 = "End Affector: (" + str(JointsCartesian[1][1].x.round(1)) + \
                                "," + str(JointsCartesian[1][1].y.round(1)) + ")"

                for pnt in waypoints_plot:
                        x = JointsCartesian[1][1].x.round(1)
                        y = JointsCartesian[1][1].y.round(1)
                        if x == pnt.value[0] and y == pnt.value[1] and pnt.plotted == False:
                                pnt.plotted = True
                        if pnt.plotted == True:
                                plt.plot([pnt.value[0]],[pnt.value[1]], marker="o")
                                plt.annotate(str(pnt.value) , xy=(pnt.value[0],pnt.value[1]+0.2))

                
                plt.annotate(showJoint1 ,xy=(-1.5,-0.5))
                plt.annotate(showJoint2 ,xy=(-1.5,-0.8))
                plt.xlabel("X")
                plt.ylabel("Y")
                plt.title("Animation")		                                #setting the figure area
                plt.savefig(filename)                                          
                a.clf()
                
                # Creating an Image list
                images.append(S.imread(filename))
                remove(filename)

        print("Creating GIF...")
        S.mimsave(out_dir + 'anime.gif',images)
        print("Gif saved to " + out_dir + 'anime.gif')

def PlotExtras(trajectory):
        print("Generating Plots...")
        filename = out_dir + "trajectories.png"
        fig,ax = plt.subplots(1)
        elbowX = []
        elbowY = []
        endAffectorX = []
        endAffectorY = []
        for traj in trajectory:
                link1, link2 = CalcFwdKinemeatics(traj[0],traj[1])
                elbowX.append(link1[1].x)
                elbowY.append(link1[1].y)
                endAffectorX.append(link2[1].x)
                endAffectorY.append(link2[1].y)
                for pnt in Waypoints:
                        if link2[1].x.round(1) == pnt[0] and link2[1].y.round(1) == pnt[1]:
                                plt.plot([pnt[0]],[pnt[1]], marker="o", markersize=10)
                                plt.annotate(str(pnt[0]) + "," + str(pnt[1]), 
                                xy=(pnt[0],pnt[1]+0.2))

        ax.plot(elbowX,elbowY)
        ax.plot(endAffectorX,endAffectorY)
        ax.set_yticks([-1, 0, 1, 2, 3, 4])
        plt.xlabel("X")
        plt.ylabel("Y")
        plt.title("Trajectory")
        plt.savefig(filename)
        print("Plot saved to", filename)

        filename = out_dir + "ThetaVsTime.png"
        fig,ax = plt.subplots(1)
        step = int(len(trajectory) / EndTime )
        theta1 = []
        theta2 = []
        for i in range(0,EndTime + 1):
                index = i*step
                theta1.append(trajectory[index][0])
                theta2.append(trajectory[index][1])

        ax.plot(theta1)
        ax.plot(theta2)
        plt.legend(['Theta1','Theta2'])  
        ax.set_xlim(0, 50)
        plt.xlabel("time(s)")
        plt.ylabel("angle(rad)")
        plt.title("Angle vs. Time")
        plt.savefig(filename)
        print("Plot saved to", filename)

        filename = out_dir + "PositionVsTime.png"
        fig,ax = plt.subplots(1)
        step = int(len(trajectory) / EndTime )
        x = []
        y = []
        for i in range(0,EndTime + 1):
                index = i*step
                link1, link2 = CalcFwdKinemeatics(trajectory[index][0],trajectory[index][1])
                x.append(link2[1].x)
                y.append(link2[1].y)

        ax.plot(x)
        ax.plot(y)
        plt.legend(['X','Y'])  
        ax.set_xlim(0, 50)
        plt.xlabel("time(s)")
        plt.ylabel("position(units)")
        plt.title("Position vs. Time")
        plt.savefig(filename)
        print("Plot saved to", filename)
                


if len(sys.argv) != 3 or len(sys.argv[2]) != 1:
        print("Usage: ./hw2a.py [/path/to/output_folder] [mode]")
        print("\tMode: 1 = Create Animation, 2 = Create Plots, 3 = Both")
else:
        out_dir = sys.argv[1]
        options = int(sys.argv[2])
        
        trajectory = CalcTrajectory(Waypoints)
        if options == 1:
                AnimateRobot(trajectory)
        elif options == 2:
                PlotExtras(trajectory)
        elif options == 3:
                AnimateRobot(trajectory)
                PlotExtras(trajectory)
        else:
                print("Usage: ./hw2a.py [/path/to/output_folder] [mode]")
                print("\tMode: 1 = Create Animation, 2 = Create Plots, 3 = Both")
